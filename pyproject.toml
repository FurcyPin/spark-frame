[tool.poetry]
name = "spark-frame"
version = "0.3.2"
description = "A library containing various utility functions for playing with PySpark DataFrames"
authors = ["FurcyPin"]
license = "Apache-2.0"
keywords = ["Spark", "PySpark", "DataFrame"]
readme = "README.md"
homepage = "https://github.com/FurcyPin/spark-frame"
repository = "https://github.com/FurcyPin/spark-frame"
include = ["spark_frame/templates/*.jinja2"]

[tool.poetry.dependencies]
python = ">=3.8.1,<3.11"

[tool.poetry.group.dev.dependencies]
pyspark = "~3.5.0"

types-setuptools = "^65.6.0.3"

black = "^22.6.0"
isort = "^5.10.1"
flake8 = "^6.0.0"
mypy = "^0.971"
bandit = "^1.7.4"
safety = "^2.1.1"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pipdeptree = "2.2.1"

mkdocs = "^1.5.3"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}
mkdocs-material = "^9.4.6"
mkdocs-include-markdown-plugin = "^6.0.3"

tox = "^4.11.3"

[build-system]
requires = ["poetry-core==1.1.14"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[report]
exclude_also = [
    "if TYPE_CHECKING:"
]



[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"
known_first_party = "spark_frame"


[tool.mypy]
# --strict
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = true
strict_equality = true
# These checks don't pass yet
disallow_any_generics = false
warn_return_any = false
# --strict end
exclude = ['tests']


[tool.pytest.ini_options]
addopts = [
    "-ra",
    #"--cov=spark_frame",
    "--doctest-modules"
]
usefixtures = "fix_pyspark_show_change"
testpaths = [
    "spark_frame",
    "tests"
]
