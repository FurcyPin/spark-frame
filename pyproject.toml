[tool.poetry]
name = "spark-frame"
version = "0.5.0"
description = "A library containing various utility functions for playing with PySpark DataFrames"
authors = ["FurcyPin"]
license = "Apache-2.0"
keywords = ["Spark", "PySpark", "DataFrame"]
readme = "README.md"
homepage = "https://github.com/FurcyPin/spark-frame"
repository = "https://github.com/FurcyPin/spark-frame"
include = ["spark_frame/py.typed"]

[tool.poetry.dependencies]
python = ">=3.8.1,<3.13"
pip = "^24.0.0"

[tool.poetry.group.dev.dependencies]
pyspark = "~3.5.0"
data-diff-viewer = "0.3.*"

black = "^24.3.0"
ruff = "^0.1.6"
mypy = "^0.971"
types-setuptools = "^65.6.0.3"
safety = "^2.1.1"

pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-xdist="^3.5.0"
tox = "^4.11.3"

pipdeptree = "2.2.1"
bump-my-version = "^0.20.3"

mkdocs = "^1.5.3"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-material = "^9.4.6"
mkdocs-include-markdown-plugin = "^6.0.3"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:"
]


[tool.mypy]
# --strict
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
implicit_reexport = true
strict_equality = true
# These checks don't pass yet
disallow_any_generics = false
warn_return_any = false
# --strict end
exclude = ['tests']


[tool.pytest.ini_options]
addopts = [
    "-ra",
    "--doctest-modules"
]
usefixtures = "fix_pyspark_show_change"
testpaths = [
    "spark_frame",
    "tests"
]

[tool.bumpversion]
current_version = "0.5.0"
commit = true
message = "Bump version: {current_version} → {new_version}"
tag = true
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<release>[a-z]+)(?P<dev>\\d+))?"
serialize = ["{major}.{minor}.{patch}"]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "spark_frame/__init__.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "sonar-project.properties"
search = "sonar.projectVersion={current_version}"
replace = "sonar.projectVersion={new_version}"
