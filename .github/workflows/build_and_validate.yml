name: Build and Validate
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  PROJECT_NAME: spark_frame
  POETRY_VERSION: "1.2.2"

jobs:
  Build-and-Validate:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ubuntu-latest, macos-latest] # We don't run on Windows atm, it's quite difficult to make Spark run on Windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Poetry lock
        run: poetry lock

      - name: Set up poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install project
        run: poetry install

      - name: Linter black
        run: poetry run black --diff --check .
      - name: Linter isort
        run: poetry run isort --check-only ${{ env.PROJECT_NAME }} tests
      - name: Linter flake8
        run: poetry run flake8 ${{ env.PROJECT_NAME }} tests
      - name: Linter mypy
        run: poetry run mypy ${{ env.PROJECT_NAME }}
      - name: Security bandit
        run: poetry run bandit .
      - name: Security safety
        run: poetry run safety check
        # We run safety but ignore the warning as some require to drop support for Python 3.7.
        continue-on-error: true

      - name: Run Unit Tests
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: poetry run pytest

      - name: Create coverage.xml
        run: poetry run coverage xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
