name: Build and Validate
on:
  push:

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  PROJECT_NAME: spark_frame
  POETRY_VERSION: "1.2.2"

jobs:
  Build-and-Validate:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Poetry lock
        run: poetry lock

      - name: Set up poetry cache
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Install project
        run: poetry install

      - name: Linter ruff (replaces black, isort, flake8 and safety)
        run: poetry run ruff check .
      - name: Linter mypy
        run: poetry run mypy ${{ env.PROJECT_NAME }}
      - name: Security safety
        run: poetry run safety check

      - name: Build docs
        run: poetry run mkdocs build

      - name: Update PATH on Windows
        run: echo ".github/workflows/resources/hadoop/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: matrix.os == 'windows-latest'

      - name: Run Unit Tests
        env:
          HADOOP_HOME: .github/workflows/resources/hadoop
        run: poetry run pytest --cov --cov-report=xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'

      - name: Run Tests against older spark versions
        run: poetry run tox
        if: matrix.os == 'ubuntu-latest'
